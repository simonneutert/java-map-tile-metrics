/*
 * This source file was generated by the Gradle 'init' task
 */
package de.simon_neutert.map_tile_metrics;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;

class ClustersTest {
    @Test
    void detectClusterPoints() {
        HashSet<Point> points = new HashSet<Point>();

        points.add(new Point(1, 1));
        points.add(new Point(2, 1));
        points.add(new Point(3, 1));

        points.add(new Point(1, 2));
        points.add(new Point(2, 2));
        points.add(new Point(3, 2));

        points.add(new Point(1, 3));
        points.add(new Point(2, 3));
        points.add(new Point(3, 3));

        HashSet<Point> expected = new HashSet<Point>();
        expected.add(new Point(2, 2));

        Clusters classUnderTest = new Clusters(points);
        assertEquals(expected, classUnderTest.detectClusterPoints(points));
    }

    @Test
    void groupClusters() {
        HashSet<Point> clusterPoints = new HashSet<Point>();

        for (int i = 1; i < 4; i++) {
            for (int j = 1; j < 4; j++) {
                clusterPoints.add(new Point(i, j));
            }
        }

        clusterPoints.add(new Point(33, 33));

        ArrayList<HashSet<Point>> expected = new ArrayList<HashSet<Point>>();

        HashSet<Point> cluster = new HashSet<Point>();

        for (int i = 1; i < 4; i++) {
            for (int j = 1; j < 4; j++) {
                cluster.add(new Point(i, j));
            }
        }

        expected.add(cluster);

        HashSet<Point> cluster2 = new HashSet<Point>();
        cluster2.add(new Point(33, 33));
        expected.add(cluster2);

        Clusters classUnderTest = new Clusters(new HashSet<Point>());
        assertEquals(expected, classUnderTest.groupClusters(clusterPoints));
    }

    @Test
    void calculateWithEmptyPoints() {
        HashSet<Point> points = new HashSet<Point>();
        ArrayList<HashSet<Point>> clusters = new ArrayList<HashSet<Point>>();

        Clusters classUnderTest = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> expected = new HashMap<String, ArrayList<HashSet<Point>>>();

        expected.put("clusters", clusters);
        expected.put("maxClusters", clusters);

        assertEquals(expected, classUnderTest.calculate());
    }

    @Test
    void calculateWithSinglePoint() {
        HashSet<Point> points = new HashSet<Point>();
        points.add(new Point(1, 1));
        ArrayList<HashSet<Point>> clusters = new ArrayList<HashSet<Point>>();

        Clusters classUnderTest = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> expected = new HashMap<String, ArrayList<HashSet<Point>>>();

        expected.put("clusters", clusters);
        expected.put("maxClusters", clusters);

        assertEquals(expected, classUnderTest.calculate());
    }

    @Test
    void calculate() {
        HashSet<Point> points = new HashSet<Point>();

        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                points.add(new Point(i, j));
            }
        }

        points.add(new Point(33, 32));
        points.add(new Point(33, 33));
        points.add(new Point(33, 34));
        points.add(new Point(34, 33));
        points.add(new Point(32, 33));

        ArrayList<HashSet<Point>> clusters = new ArrayList<HashSet<Point>>();
        HashSet<Point> cluster = new HashSet<Point>();
        cluster.add(new Point(1, 1));
        cluster.add(new Point(2, 1));
        cluster.add(new Point(3, 1));
        cluster.add(new Point(1, 2));
        cluster.add(new Point(2, 2));
        cluster.add(new Point(3, 2));
        cluster.add(new Point(1, 3));
        cluster.add(new Point(2, 3));
        cluster.add(new Point(3, 3));
        clusters.add(cluster);

        HashSet<Point> cluster2 = new HashSet<Point>();
        cluster2.add(new Point(33, 33));
        clusters.add(cluster2);

        ArrayList<HashSet<Point>> maxClusters = new ArrayList<HashSet<Point>>();
        maxClusters.add(cluster);

        HashMap<String, ArrayList<HashSet<Point>>> expected = new HashMap<String, ArrayList<HashSet<Point>>>();
        expected.put("clusters", clusters);
        expected.put("maxClusters", maxClusters);

        Clusters classUnderTest = new Clusters(points);
        assertEquals(expected, classUnderTest.calculate());

    }
}
