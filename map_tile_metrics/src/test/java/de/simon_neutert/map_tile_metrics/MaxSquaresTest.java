/*
 * This source file was generated by the Gradle 'init' task
 */
package de.simon_neutert.map_tile_metrics;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.jr.ob.JSON;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.HashMap;

class MaxSquaresTest {
    @Test
    void addBorderToClusters() {
        HashSet<Point> points = new HashSet<Point>();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                points.add(new Point(i, j));
            }
        }
        HashSet<Point> expectedClusterTiles = new HashSet<Point>();
        for (int i = 1; i < 2; i++) {
            for (int j = 1; j < 2; j++) {
                expectedClusterTiles.add(new Point(i, j));
            }
        }

        ArrayList<HashSet<Point>> expectedClusterPoints = new ArrayList<HashSet<Point>>();
        expectedClusterPoints.add(points);

        Clusters clusterService = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> clusters = clusterService.calculate();
        ArrayList<HashSet<Point>> expectedCluster = new ArrayList<HashSet<Point>>();
        expectedCluster.add(expectedClusterTiles);
        assertEquals(expectedCluster, clusters.get("clusters"));

        ArrayList<HashSet<Point>> clusterForSquares = clusters.get("clusters");
        MaxSquares classUnderTest = new MaxSquares(clusterForSquares, points);
        assertFalse(classUnderTest.getBordersAdded());
        assertEquals(classUnderTest.getClusters(), clusters.get("clusters"));
        classUnderTest.addBorderToClusters();
        assertTrue(classUnderTest.getBordersAdded());
        assertNotEquals(classUnderTest.getClusters(), clusters.get("clusters"));

        assertEquals(classUnderTest.getClusters(), expectedClusterPoints);
    };

    @Test
    void findMaxSquares() {
        HashSet<Point> points = new HashSet<Point>();

        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                points.add(new Point(i, j));
            }
        }

        Clusters clusterService = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> clusters = clusterService.calculate();

        ArrayList<HashSet<Point>> clusterForSquares = clusters.get("clusters");
        MaxSquares classUnderTest = new MaxSquares(clusterForSquares, points);

        ArrayList<HashMap<Point, Integer>> expected = new ArrayList<HashMap<Point, Integer>>();
        HashMap<Point, Integer> expectedTile = new HashMap<Point, Integer>();
        expectedTile.put(new Point(0, 0), 10);
        expected.add(expectedTile);

        assertEquals(expected, classUnderTest.calculate());
    }

    @Test
    void findMaxSquaresWithEmptyDataset() {
        HashSet<Point> points = new HashSet<Point>();
        Clusters clusterService = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> clusters = clusterService.calculate();

        ArrayList<HashSet<Point>> clusterForSquares = clusters.get("clusters");
        MaxSquares classUnderTest = new MaxSquares(clusterForSquares, points);

        ArrayList<HashMap<Point, Integer>> expected = new ArrayList<HashMap<Point, Integer>>();
        assertEquals(expected, classUnderTest.calculate());
    }

    @Test
    void findCorrectDataInTestData() {
        String filePath = "src/test/resources/test_data.json";
        String content = "";
        List<Point> jsonPoints = new ArrayList<Point>();

        try {
            content = new String(Files.readAllBytes(Paths.get(filePath)));
            jsonPoints = JSON.std.listOfFrom(Point.class, content);
        } catch (IOException e) {
            e.printStackTrace();
        }

        HashSet<Point> points = new HashSet<Point>();
        jsonPoints.stream().forEach(point -> points.add(point));

        Clusters clusterService = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> clusterScores = clusterService.calculate();

        ArrayList<HashSet<Point>> maxClusters = clusterScores.get("maxClusters");
        assertEquals(726, maxClusters.get(0).size());

        ArrayList<HashSet<Point>> clusters = clusterScores.get("clusters");
        assertEquals(44, clusters.size());

        Integer clustersOfSizeOne = clusters.stream()
                .filter(cluster -> cluster.size() == 1)
                .toArray().length;
        assertEquals(24, clustersOfSizeOne);

        MaxSquares classUnderTest = new MaxSquares(clusters, points);
        ArrayList<HashMap<Point, Integer>> maxSquares = classUnderTest.calculate();

        assertEquals(16, maxSquares.get(0).values().toArray()[0]);
        assertEquals(6, maxSquares.size());
    }

    @Test
    void findMaxSquaresForTestData3() {
        String filePath = "src/test/resources/test_data3.json";
        String content = "";
        List<Point> jsonPoints = new ArrayList<Point>();

        try {
            content = new String(Files.readAllBytes(Paths.get(filePath)));
            jsonPoints = JSON.std.listOfFrom(Point.class, content);
        } catch (IOException e) {
            e.printStackTrace();
        }

        HashSet<Point> points = new HashSet<Point>();
        jsonPoints.stream().forEach(point -> points.add(point));

        Clusters clusterService = new Clusters(points);
        HashMap<String, ArrayList<HashSet<Point>>> clusters = clusterService.calculate();

        ArrayList<HashSet<Point>> maxClusters = clusters.get("maxClusters");
        assertEquals(25, maxClusters.get(0).size());
        assertEquals(1, maxClusters.size());

        ArrayList<HashSet<Point>> clusterForSquares = clusters.get("clusters");
        MaxSquares classUnderTest = new MaxSquares(clusterForSquares, points);

        ArrayList<HashMap<Point, Integer>> expected = new ArrayList<HashMap<Point, Integer>>();
        HashMap<Point, Integer> expectedTile1 = new HashMap<Point, Integer>();
        expectedTile1.put(new Point(8550, 5563), 5);
        HashMap<Point, Integer> expectedTile2 = new HashMap<Point, Integer>();
        expectedTile2.put(new Point(8544, 5559), 5);
        HashMap<Point, Integer> expectedTile3 = new HashMap<Point, Integer>();
        expectedTile3.put(new Point(8543, 5559), 5);
        expected.add(expectedTile1);
        expected.add(expectedTile2);
        expected.add(expectedTile3);

        assertEquals(expected, classUnderTest.calculate());
    }
}